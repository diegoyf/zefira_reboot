{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"reset",
				"resetPasswordUrl"
			],
			[
				"shol",
				"should_not"
			],
			[
				"ed",
				"end"
			],
			[
				"shou",
				"should_not"
			],
			[
				"user",
				"user_path"
			],
			[
				"sign",
				"sign_in"
			],
			[
				"dee",
				"delete"
			],
			[
				"fill",
				"fill_in"
			],
			[
				"un",
				"unless	unless â€¦ end"
			],
			[
				"shu",
				"should"
			],
			[
				"cli",
				"click_link"
			],
			[
				"should",
				"should_not"
			],
			[
				"have",
				"have_link"
			],
			[
				"hav",
				"have_link"
			],
			[
				"fil",
				"fill_in"
			],
			[
				"sig",
				"signup_path"
			],
			[
				"ue",
				"user"
			],
			[
				"pas",
				"password_confirmation"
			],
			[
				"passwo",
				"password_confirmation"
			],
			[
				"pass",
				"password"
			],
			[
				"sh",
				"should"
			],
			[
				"passw",
				"password_confirmation"
			],
			[
				"be",
				"be_valid"
			],
			[
				"shul",
				"should_not"
			],
			[
				"sho",
				"should_not"
			],
			[
				"lin",
				"link_to"
			],
			[
				"infe",
				"infer_base_class_for_anonymous_controllers"
			],
			[
				"fix",
				"fixture_path"
			],
			[
				"rspec",
				"rspec"
			],
			[
				"moc",
				"mock_with"
			],
			[
				"R",
				"RSpec"
			],
			[
				"conf",
				"config"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import pymongo \nimport asyncmongo\nimport memcache\n\n\"\"\" Clase que provee todas las funciones de administracion de\ndatos de toda la aplicacion \"\"\" \n\nclass DataManagement():\n\n	#Funcion de inicio de la clase\n	#Un parametro: string nombre de la base de datos\n	def __init__(self,database):\n\n		if database == \"zefira\":\n\n			conn = pymongo.Connection(\"localhost\", 27017)\n			self.db = conn.zefira\n\n	#Creacion de usuarios		\n	def create_user(self, branch, request_args):\n\n		import base64, uuid\n		#Revisa el branch y ejecuta de acuerdo a su resultado\n\n		if branch  == \"companies\":\n			new_user = {\n				'_id':\"comp\"+base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes),\n                'username': request_args['username'][0],\n                'password': request_args['password'][0],\n                'info' : {\n                    'name': request_args['name'][0],\n                    'description': request_args['description'][0],\n                    'email' : request_args['email'][0],                    },\n                'benefits' : []\n                }\n			self.db.companies.save(new_user)\n			return \"/cbox\"\n\n		elif branch == \"clientes\" :\n			new_user = {\n				'_id':\"user\"+base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes),\n                'username' : request_args['username'][0],\n                'password': request_args['password'][0],\n                'info':{\n                	'email': request_args['email'][0],\n                	'name' : request_args['nombre'][0],\n                	'last_name': request_args['apellido'][0]\n                	},\n                'interests': [],\n                'reserves' : [],\n                'session' : {'benefits': []}\n                }\n			self.db.users.save(new_user)\n			return \"/box\"\n		else:\n			return \"/error\"\n\n    #Funcion obtiene informacion usuario, depende del BaseHandler\n        	\n	def fetch_user(self,username,password,branch):\n		try:\n			if branch == \"clientes\":\n				user = self.db.users.find_one({'username':username})\n			else:\n				branch == \"companies\"\n				user = self.db.companies.find_one({\"username\":username})\n			if user['password'] == password:\n\n				return user\n			else:\n				raise Exception\n		except:\n			return None\n\n\n	#Funcion que utiliza el nombre de usuario para llamar todos sus\n	#beneficios y reservas\n\n	def fetch_benefits_usr(self,interests_ref, user):\n		companies_followd = []\n		benefits_dref = []\n		benefits = []\n\n		if len(interests_ref) == 0: \n			return None\n		else:\n			for i in interests_ref[:7]:\n				companies_followd.append(self.db.dereference(i))\n			for j in range(len(companies_followd)):\n				for i in range(len(companies_followd[j]['benefits'])):\n					benefits_dref.append(companies_followd[j]['benefits'][i])\n		for i in benefits_dref:\n			benefits.append(self.db.dereference(i))\n\n		reserves = user['reserves']\n		if len(reserves) == 0 :\n			for i in benefits:\n				i['message'] = \"Reservar\" \n		else:\n			reserves_dref = []\n			for i in range(len(reserves)):\n				reserves_dref.append(self.db.dereference(reserves[i]))\n			for i in benefits:\n				if i in reserves_dref:\n					i['message'] = \"Reservado\"\n				else:\n					i['message'] = \"Reservar\"\n		return benefits\n\n	#Funcion que utiliza el nombre de usuario  empresa para llamar\n	#beneficios\n\n	def fetch_benefits_cmp(self, benefits_ref):\n\n		benefits_deref = []\n		if not benefits_ref:\n			return None\n		for i in range(len(benefits_ref)):\n			benefits_deref.append(self.db.dereference(benefits_ref[i]))\n		return benefits_deref\n\n	#Funcion que se encarga de la publicacion de beneficios\n\n	def publish_benefit(self, request_args, user):\n		import base64, uuid\n		import datetime\n		benefit = {\n			\"_id\":\"bene\"+base64.b64encode(uuid.uuid4().bytes + uuid.uuid4().bytes),\n            \"title\":request_args['title'][0],\n            \"description\": request_args['description'][0],\n            \"company_name\": user['info']['name'],\n            'date_published' : datetime.datetime.now(),\n            'active': True,\n            'dates_reserved': [],\n            'dates_validated': [],\n            'times_reserved': 0,\n            'times_validated': 0 ,\n            #'picture_id': '',\n            'benefit_type' :request_args['benefit_type'][0],\n		}\n\n		from bson.dbref import DBRef\n		if self.validate(benefit):\n			self.db.benefits.save(benefit)\n			user['benefits'].append(DBRef('benefits', benefit[\"_id\"]))\n			self.db.companies.save(user)\n			return True\n		else:\n			return False\n\n	def validate(self,data):\n		branch= data['_id'][:4]\n\n		if branch == 'bene':\n\n			if not self.db.benefits.find_one({'_id': data['_id']}):\n				return True\n			else:\n				return False\n		elif branch == \"comp\":\n			if not self.db.companies.find_one({'_id':data['_id']}):\n				return True\n			else:\n				return False\n		else:\n			if not self.db.users.find_one({'_id': data['_id']}):\n				return True\n			else:\n				return False							\n\n	def update_activity_queue(self, action,company_id, benefit_id):\n		from bson.dbref import DBRef \n\n		company = self.db.company_queue.find_one({'_id': company_id})\n		dbref_obj = DBRef('benefits', benefit_id)\n		if action == \"reserve\":\n			company['queue'].append(dbref_obj)\n		else: \n			if dbref_obj in company['queue']:\n				for i in range(len(company['queue'])):\n					if company['queue'][i] == dbref_obj:\n						company['queue'].pop(i)\n						break\n					else: \n						pass	 \n\n\n		self.db.company_queue.save(company)\n		return None\n\n	def fetch_activity_queue(self,company_id):\n			record = self.db.company_queue.find_one({'_id':company_id }, limit = 10)\n			benefits = []\n			if len(record['queue']) == 0:\n				return record['queue']\n			else:	\n				for i in record['queue']:\n					benefits.append(self.db.dereference(i))\n				return benefits		 		",
			"file": "datamanag.py",
			"file_size": 5602,
			"file_write_time": 1368498749000000,
			"settings":
			{
				"buffer_size": 5618,
				"line_ending": "Unix"
			}
		},
		{
			"file": "main.py",
			"settings":
			{
				"buffer_size": 7602,
				"line_ending": "Windows"
			}
		},
		{
			"file": "activity.py",
			"settings":
			{
				"buffer_size": 450,
				"line_ending": "Windows"
			}
		},
		{
			"file": "static/test.js",
			"settings":
			{
				"buffer_size": 9252,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "// Copyright 2009 FriendFeed\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n// not use this file except in compliance with the License. You may obtain\n// a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n// License for the specific language governing permissions and limitations\n// under the License.\n\n$(document).ready(function() {\n    if (!window.console) window.console = {};\n    if (!window.console.log) window.console.log = function() {};\n\n    $(\"#messageform\").live(\"submit\", function() {\n        newMessage($(this));\n        return false;\n    });\n    $(\"#messageform\").live(\"keypress\", function(e) {\n        if (e.keyCode == 13) {\n            newMessage($(this));\n            return false;\n        }\n    });\n    $(\"#message\").select();\n    updater.poll();\n});\n\nfunction newMessage(form) {\n    var message = form.formToDict();\n    var disabled = form.find(\"input[type=submit]\");\n    disabled.disable();\n    $.postJSON(\"/a/message/new\", message, function(response) {\n        updater.showMessage(response);\n        if (message.id) {\n            form.parent().remove();\n        } else {\n            form.find(\"input[type=text]\").val(\"\").select();\n            disabled.enable();\n        }\n    });\n}\n\nfunction getCookie(name) {\n    var r = document.cookie.match(\"\\\\b\" + name + \"=([^;]*)\\\\b\");\n    return r ? r[1] : undefined;\n}\n\njQuery.postJSON = function(url, args, callback) {\n    args._xsrf = getCookie(\"_xsrf\");\n    $.ajax({url: url, data: $.param(args), dataType: \"text\", type: \"POST\",\n            success: function(response) {\n        if (callback) callback(eval(\"(\" + response + \")\"));\n    }, error: function(response) {\n        console.log(\"ERROR:\", response)\n    }});\n};\n\njQuery.fn.formToDict = function() {\n    var fields = this.serializeArray();\n    var json = {}\n    for (var i = 0; i < fields.length; i++) {\n        json[fields[i].name] = fields[i].value;\n    }\n    if (json.next) delete json.next;\n    return json;\n};\n\njQuery.fn.disable = function() {\n    this.enable(false);\n    return this;\n};\n\njQuery.fn.enable = function(opt_enable) {\n    if (arguments.length && !opt_enable) {\n        this.attr(\"disabled\", \"disabled\");\n    } else {\n        this.removeAttr(\"disabled\");\n    }\n    return this;\n};\n\nvar updater = {\n    errorSleepTime: 500,\n    cursor: null,\n\n    poll: function() {\n        var args = {\"_xsrf\": getCookie(\"_xsrf\")};\n        if (updater.cursor) args.cursor = updater.cursor;\n        $.ajax({url: \"/a/message/updates\", type: \"POST\", dataType: \"text\",\n                data: $.param(args), success: updater.onSuccess,\n                error: updater.onError});\n    },\n\n    onSuccess: function(response) {\n        try {\n            updater.newMessages(eval(\"(\" + response + \")\"));\n        } catch (e) {\n            updater.onError();\n            return;\n        }\n        updater.errorSleepTime = 500;\n        window.setTimeout\n        window.setTimeout(updater.poll, 0);\n    },\n\n    onError: function(response) {\n        updater.errorSleepTime *= 2;\n        console.log(\"Poll error; sleeping for\", updater.errorSleepTime, \"ms\");\n        window.setTimeout(updater.poll, updater.errorSleepTime);\n    },\n\n    newMessages: function(response) {\n        if (!response.messages) return;\n        updater.cursor = response.cursor;\n        var messages = response.messages;\n        updater.cursor = messages[messages.length - 1].id;\n        console.log(messages.length, \"new messages, cursor:\", updater.cursor);\n        for (var i = 0; i < messages.length; i++) {\n            updater.showMessage(messages[i]);\n        }\n    },\n\n    showMessage: function(message) {\n        var existing = $(\"#m\" + message.id);\n        if (existing.length > 0) return;\n        var node = $(message.html);\n        node.hide();\n        $(\"#inbox\").append(node);\n        node.slideDown();\n    }\n};\n",
			"file": "/home/diego/Desktop/demos/chat/static/chat.js",
			"file_size": 4056,
			"file_write_time": 1361742636000000,
			"settings":
			{
				"buffer_size": 4082,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 450.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/diego/Desktop/demos/chat/chatdemo.py",
		"/home/diego/zefiratest/zefira3/static/test.js",
		"/home/diego/zefiratest/zefira2/uimodules.py",
		"/home/diego/zefiratest/zefira2/templates/main.html",
		"/home/diego/zefiratest/zefira2/templates/deploy.html",
		"/home/diego/zefiratest/zefira2/requesthandlers.py",
		"/home/diego/zefiratest/zefira2/templates/box.html",
		"/home/diego/zefiratest/zefira2/static/test.css",
		"/home/diego/zefiratest/zefira2/templates/handle.html",
		"/home/diego/zefiratest/zefira2/templates/modules/benefitco.html",
		"/home/diego/zefiratest/zefira2/templates/signupcomp.html",
		"/home/diego/zefiratest/zefira2/templates/publish.html",
		"/home/diego/zefiratest/zefira2/templates/empresas.html",
		"/home/diego/zefiratest/zefira2/templates/handle2.html",
		"/home/diego/zefiratest/zefira2/templates/signupcl.html",
		"/home/diego/zefiratest/zefira1/uimodules.py",
		"/home/diego/zefiratest/zefira2/templates/logincl.html",
		"/home/diego/zefiratest/zefira2/templates/clientes.html",
		"/home/diego/zefiratest/zefira2/templates/index.html",
		"/home/diego/zefiratest/zefira2/.gitignore",
		"/home/diego/zefiratest/zefira1/.gitignore",
		"/home/diego/zefiratest/zefira1/.gitignore~",
		"/home/diego/zefiratest/zefira2/templates/handle2.hmtl~",
		"/home/diego/zefiratest/zefira2/templates/modules/benefit.html",
		"/home/diego/zefiratest/zefira2/datamanag.py",
		"/home/diego/zefiratest/zefira1/templates/index.html",
		"/home/diego/zefiratest/zefira1/admin.py",
		"/home/diego/zefiratest/zefira1/templates/main.html",
		"/home/diego/zefiratest/zefira1/templates/box.html",
		"/home/diego/zefiratest/zefira1/static/test.css",
		"/home/diego/zefiratest/zefira1/main.py",
		"/home/diego/zefiratest/zefira1/templates/handle2.html",
		"/home/diego/zefiratest/zefira1/templates/handle.html",
		"/home/diego/zefiratest/zefira1/templates/cbox.html",
		"/home/diego/zefiratest/zefira1/templates/modules/benefit.html",
		"/home/diego/zefiratest/zefira1/templates/handle2.hmtl",
		"/home/diego/Desktop/Tabs-Pills-BEGIN/tabs-pills.html",
		"/home/diego/rails/sample_app/app/views/layouts/_header.html.erb",
		"/home/diego/rails/sample_app/app/views/layouts/application.html.erb",
		"/home/diego/zefiratest/zefira1/templates/snipp",
		"/home/diego/zefiratest/zefira1/templates/empresas.html",
		"/home/diego/zefiratest/zefira1/templates/signupcomp.html",
		"/home/diego/zefiratest/zefira1/templates/signupcl.html",
		"/home/diego/zefiratest/zefira1/templates/clientes.html",
		"/home/diego/rails/sample_app/app/assets/javascripts/application.js",
		"/home/diego/zefiratest/zefira1/static/test.js",
		"/home/diego/rails/sample_app/app/views/static_pages/home.html.erb",
		"/home/diego/zefira2/templates/main.html",
		"/home/diego/zefira2/main.py",
		"/home/diego/zefira2/data_manag.py",
		"/home/diego/zefira2/templates/empresas.html",
		"/home/diego/zefira2/requesthandlers.py",
		"/home/diego/zefira2/templates/logincomp.html",
		"/home/diego/zefira2/templates/index.html",
		"/home/diego/zefira2/templates/signupcl.html",
		"/home/diego/zefira2/templates/clientes.html",
		"/home/diego/zefira2/templates/logincl.html",
		"/home/diego/zefira1/admin.py",
		"/home/diego/zefira1/data_manag.py",
		"/home/diego/zefira2/models.py",
		"/home/diego/zefira1/main.py",
		"/home/diego/zefira/data_manag.py",
		"/home/diego/zefira/main.py",
		"/home/diego/zefira2/handlers.py",
		"/home/diego/nodetest/node_app/app.js",
		"/home/diego/nodetest/node_app/models/Account.js",
		"/home/diego/nodetest/node_app/public/js/router.js",
		"/home/diego/nodetest/node_app/public/js/SocialNet.js",
		"/home/diego/nodetest/node_app/public/js/views/login.js",
		"/home/diego/nodetest/node_app/public/js/views/register.js",
		"/home/diego/nodetest/node_app/public/js/views/index.js",
		"/home/diego/nodetest/node_app/public/templates/login.html",
		"/home/diego/nodetest/node_app/register.html",
		"/home/diego/.config/sublime-text-2/Packages/Default/Preferences.sublime-settings",
		"/home/diego/.config/sublime-text-2/Packages/User/Preferences.sublime-settings",
		"/home/diego/nodetest/node_app/public/js/boot.js",
		"/home/diego/nodetest/node_app/views/index.jade",
		"/home/diego/nodetest/node_app/package.json",
		"/home/diego/nodetest/node_app/views/stooges.jade",
		"/home/diego/nodetest/node_app/packages.json",
		"/home/diego/rails/sample_app/app/models/user.rb",
		"/home/diego/rails/sample_app/spec/models/user_spec.rb",
		"/home/diego/rails/sample_app/app/models/micropost.rb",
		"/home/diego/rails/sample_app/spec/models/micropost_spec.rb",
		"/home/diego/rails/sample_app/db/migrate/20130427015232_create_microposts.rb",
		"/home/diego/rails/sample_app/app/views/users/_user.html.erb",
		"/home/diego/rails/sample_app/spec/requests/user_pages_spec.rb",
		"/home/diego/rails/sample_app/spec/factories.rb",
		"/home/diego/rails/sample_app/spec/requests/authentication_pages_spec.rb",
		"/home/diego/rails/sample_app/app/controllers/users_controller.rb",
		"/home/diego/rails/sample_app/lib/tasks/sample_data.rake",
		"/home/diego/rails/sample_app/db/migrate/20130425050011_add_admin_to_users.rb",
		"/home/diego/rails/sample_app/app/views/users/index.html.erb",
		"/home/diego/rails/sample_app/app/assets/stylesheets/static_pages.css.scss",
		"/home/diego/rails/sample_app/Gemfile",
		"/home/diego/rails/sample_app/app/helpers/users_helper.rb",
		"/home/diego/rails/sample_app/app/views/users/show.html.erb",
		"/home/diego/rails/sample_app/app/helpers/sessions_helper.rb",
		"/home/diego/rails/sample_app/app/controllers/sessions_controller.rb",
		"/home/diego/rails/sample_app/spec/support/utilities.rb",
		"/home/diego/rails/sample_app/app/views/users/edit.html.erb",
		"/home/diego/rails/sample_app/db/migrate/20130424181850_add_remember_token_to_users.rb",
		"/home/diego/rails/sample_app/db/migrate/20130424180720_add_remember_token_to_users.rb",
		"/home/diego/rails/sample_app/app/controllers/application_controller.rb",
		"/home/diego/rails/sample_app/app/views/sessions/new.html.erb",
		"/home/diego/rails/sample_app/app/views/layouts/_footer.html.erb",
		"/home/diego/rails/sample_app/config/routes.rb",
		"/home/diego/rails/sample_app/config/locales/en.yml",
		"/home/diego/rails/sample_app/config/environments/production.rb",
		"/home/diego/rails/sample_app/app/views/shared/_error_messages.html.erb",
		"/home/diego/rails/sample_app/app/views/users/new.html.erb",
		"/home/diego/rails/sample_app/config/environments/test.rb",
		"/home/diego/rails/sample_app/db/migrate/20130423041146_add_index_to_users_email.rb",
		"/home/diego/rails/sample_app/spec/requests/static_pages_spec.rb",
		"/home/diego/rails/sample_app/app/views/layouts/_shim.html.erb",
		"/home/diego/rails/sample_app/app/assets/stylesheets/custom.css.scss",
		"/home/diego/rails/sample_app/.gitignore",
		"/home/diego/rails/sample_app/example_user.rb",
		"/home/diego/rails/sample_app/spec/spec_helper.rb",
		"/home/diego/rails/sample_app/app/helpers/application_helper.rb",
		"/home/diego/rails/sample_app/config/database.yml",
		"/home/diego/.config/sublime-text-2/Packages/RubyTest/RubyTest.sublime-settings",
		"/home/diego/rails/sample_app/config/boot.rb",
		"/home/diego/rails/sample_app/app/controllers/static_pages_controller.rb",
		"/home/diego/rails/sample_app/Guardfile",
		"/home/diego/rails/sample_app/app/views/static_pages/contact.html.erb"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"user[username]",
			"type",
			";\">",
			"Empresas",
			"all",
			"{@",
			"diego",
			"yaml"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "datamanag.py",
					"settings":
					{
						"buffer_size": 5618,
						"regions":
						{
						},
						"selection":
						[
							[
								5359,
								5359
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2171.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "main.py",
					"settings":
					{
						"buffer_size": 7602,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "activity.py",
					"settings":
					{
						"buffer_size": 450,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "static/test.js",
					"settings":
					{
						"buffer_size": 9252,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1014.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 4,
					"file": "/home/diego/Desktop/demos/chat/static/chat.js",
					"settings":
					{
						"buffer_size": 4082,
						"regions":
						{
						},
						"selection":
						[
							[
								3067,
								3067
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 975.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.482081911263,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 153.0,
	"status_bar_visible": true
}
